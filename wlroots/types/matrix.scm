(define-module (wlroots types matrix)
  #:use-module (wayland protocol)
  #:use-module (wlroots types)
  #:use-module (wlroots utils)
  #:use-module (wlroots util box)
  #:use-module (bytestructure-class)
  #:use-module (bytestructures guile)
  #:use-module ((system foreign) #:prefix ffi:))

(define-wlr-procedure (wlr-matrix-project-box box transform rotation projection)
  (ffi:void "wlr_matrix_project_box" (list '* '* ffi:int32 ffi:float '*))
  (let* ((max-vector-length 9)
         (mat (bytestructure (bs:vector max-vector-length float))))
    (% (bytestructure->pointer mat)
       (unwrap-wlr-box box)
       (bs:enum->integer %wl-output-transform-enum transform)
       rotation
       (if (> (length projection) max-vector-length)
           (bytestructure->pointer (bytestructure (bs:vector (length projection)
                                                             float)
                                                  (list->vector projection)))
         (raise (condition (&message (message  "Not a 9 length vector or list"))))))

    (map (lambda (n) (bytestructure-ref mat n)) (iota max-vector-length))))
